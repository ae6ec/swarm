#!/usr/bin/env python3
import socket, threading
import random

class ClientThread(threading.Thread):

    def __init__(self,clientAddress,clientsocket,clients,cid):#,to):   ):
        threading.Thread.__init__(self)
        #self.to=to# MAYBE SOURCE OR SOMEONE ELSE
        self.cid=cid# USER
        self.csocket = clientsocket
        self.endto=''
        #self.clients=clients
        print ("New connection added: ", clientAddress)


    def run(self):
        #print ("Connection from : ", clientAddress)
        #self.csocket.send(bytes("Hi, This is from Server..",'utf-8'))
        check=0
        msg = ''
        divider=":|:"
        i=0
        to='000000'
        print("[+]Starting Recieve client CID:",self.cid)
        isCD=0

        while True:
            rawdata = self.csocket.recv(2048)
            data = rawdata.decode().split(divider,4)
            #print ("from client",rawdata)
            #add here no data if
            if i>60:
                print('[-]Disconnecting with',self.cid,' Due to Inactivity')
                break

            if rawdata=="":
                i+=1
                print('retrying ',i)
            elif check==1:
                if(data[2]=='CACK'):
                    isCD=1
                    to=data[1]
                    print('[+]connected to device ',data[3])
                    #sendsocket=self.clients[data[0]]
                    sendsocket=clients[data[0]]
                    check=0
                    #self.socket.sendall(bytes(self.cid+divider+'000000'+divider+"CACK"+divider+'SORC'+divider+to,'UTF-8'))
                elif data[2]=='NACK':
                    isCD=0
                    to='000000'
                    check=0
                    #self.socket.sendall(bytes(self.cid+divider+'000000'+divider+"FCN"+divider+'SORC'+divider+to,'UTF-8'))
                    print('[-]connection to device ',data[3],' failed')
                else:
                    #print('dataack data was',rawdata.decode())
                    check=0
            #elif not(len(data)>3):
                #print('packet Corrupted')
            elif(data[0]=="000000" and data[2]=='SINK'):
                data = rawdata.decode().split(divider,6) #fix these if statements
                print("[+]Device ",self.cid," acting as Sink")
                to='000000'
                print('DATA is :',rawdata.decode())
                print('ENDING IS ',data[4]) ## remove this
                self.end='\n'if data[4]=='02' else ''
                print('now end is ',self.end)
                self.csocket.sendall(bytes(self.cid+divider+to+divider+"CACK"+divider+data[2]+self.end,'UTF-8'))
            elif(data[0]=="000000" and data[2]=='SORC'):
                data = rawdata.decode().split(divider,6)
                print("[+] Device",self.cid," acting as source for :",data[3])
                self.end=data[4]
                if(data[3] in clients):
                    sendsocket=clients[data[3]]
#                if(data[3] in self.clients): IF DOESN'T WORK THEN REMOVE
#                    sendsocket=self.clients[data[3]]
                    print("[+]Device ",data[3]," found")#now as send a signal to data to change to [CSRC]
                    sendsocket.sendall(bytes(data[3]+divider+self.cid+divider+"CSRC"+divider+self.cid+divider+'/n','UTF-8'))
                    #Sending ACK will have \n
                    #k = self.csocket.recv(2048)#self.scoket
                    #dataack = k.decode().split(divider,4)
                    #print('dataack')
                    check=1
                else:
                    print("[-]Device ",data[3]," not found")
                    check=0
                    self.csocket.sendall(bytes(self.cid+divider+to+divider+"FCN"+divider+data[2]+divider+data[3],'UTF-8'))
            elif data[2]=='CLOSE':
                print('[-]Disconnecting from user Initiated by Device')
                break

            if data[2]=="CHAT" or data[2]=='NULL' or data[2]=='CACK' or data[2]=='NACK' or data[2]=='FCN' or data[2]=='ECHO':
                    #print('Chat Data is ',data[3],' data[0] is',data[0],'and to is ',to)
            #for x in rawdata.decode():
                    #print(x)
                    if data[2]=='CACK' or data[2] =='NACK' or data[2]=='FCN':
                        print(data[2],'|',self.cid,'->',data[0])
                        clients[data[0]].sendall(bytes(data[0]+divider+self.cid+divider+data[2]+divider,'UTF-8'))
                        #self.clients[data[0]].sendall(bytes(data[0]+divider+self.cid+divider+data[2]+divider,'UTF-8'))
                    elif data[2]=='ECHO':
                        print(data[2],'|','SERVER','->',self.cid)
                        self.csocket.sendall(bytes(self.cid+divider+to+divider+"ECHO"+divider,'UTF-8'))
                    elif data[0]=='000000':
                        print(data[2],'|',self.cid,'->',data[0])
                        self.csocket.sendall(bytes(self.cid+divider+to+divider+"CHAT"+divider+data[3],'UTF-8'))
                    else:
                        print(data[2],'|',self.cid,'->',data[0])
                       # self.clients[data[0]].sendall(bytes(data[0]+divider+self.cid+divider+"CHAT"+divider+data[3],'UTF-8'))
                        clients[data[0]].sendall(bytes(data[0]+divider+self.cid+divider+"CHAT"+divider+data[3],'UTF-8'))
                    i=0
        print("Device at ", clientAddress , " disconnected...")
        del clients[self.cid]




#DRIVER CODE
HOST = ""
PORT = 8080
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server.bind((HOST, PORT))
clients={}
print("Server started")
print("Waiting for client request..")

while True:
    #print("[+]Accepting self.clients")
    server.listen(1)
    clientsock, clientAddress = server.accept()

    #divider=":|:"
    clientid=''
    #session=''
    for x in range(6):
    	clientid+=str(random.randint(1,9))
    #newthread = ClientThread(clientAddress, clientsock,client,clientid)
    #session+=clientid+divider+'000000'+divider+"CID"+divider+clientid+divider
    clients[clientid]=clientsock
    print("[+]Device added ")
    test=[k for k in clients]
    print('Device List at the moment',test)
#data form at_kkmodi
    newthread = ClientThread(clientAddress, clientsock,clients,clientid)
    # remove this above one
    newthread.start()





'''
if client wants to connect to other client then send clientid
server id 00000
 wants to connect SORC
doesn't want to connect SINK
client.sendall(bytes('SERVER'+divider+clientid+divider+11+divider+_THECLIENTIDHERE_,'UTF-8'))
 MESSAGE FORMAT   TO/from/what/data
 NACK no ack
CACK =change ack
FCN= failed change negative ack
CSRC changing source
'''
