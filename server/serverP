#!/usr/bin/env python3
import socket, threading
import random

class ClientThread(threading.Thread):

    def __init__(self,clientAddress,clientsocket,clients,cid):
        threading.Thread.__init__(self)
        self.cid=cid# USER
        self.csocket = clientsocket
        print ("New connection added: ", clientAddress)
    def run(self):
        check=0
        msg = ''
        divider=":|:"
        i=0
        to='000000'
        print("[+]Starting Recieve client CID:",self.cid)
        isCD=0

        while True:
            rawdata = self.csocket.recv(2048)
            data = rawdata.decode().split(divider,4)
            print ("from client",rawdata.decode()) #Test
            if not len(data[0])==6:
                for i in range(1,len(data[0])):
                    k=rawdata.decode()[i:].split(divider,4)
                    if len(k[0])==6 and k[0].isdigit():
                        data=k
                        print("Error corrected [",i," iterations]")
                        break
                print('data corrected ',data)
            if i>60:
                print('[-]Disconnecting with',self.cid,' Due to Inactivity')
                break

            if rawdata=="":
                i+=1
                print('retrying ',i)
                print('\n[-]DISCARDING PACKET | packet was ',in_data.decode())
                continue
            elif check==1:
                if(data[2]=='CACK'):
                    isCD=1
                    to=data[1]
                    print('[+]connected to device ',data[3])
                    check=0
                elif data[2]=='NACK':
                    isCD=0
                    to='000000'
                    check=0
                    print('[-]connection to device ',data[3],' failed')
                    check=0
            elif(data[2]=='SINK'):
                data = rawdata.decode().split(divider,6) #fix these if statements
                if not len(data[0])==6:
                    for i in range(1,len(data[0])):
                        k=rawdata.decode()[i:].split(divider,6)
                        if len(k[0])==6 and k[0].isdigit():
                            data=k
                            print("Error corrected [",i," iterations]")
                            break            

                print("[+]Device ",self.cid," acting as Sink")
                print("[+] add data[0]=='000000' and  on sink wala if and remove this ")
                to='000000'
                print('DATA is :',data)#test
                print('ENDING IS ',data[4]) #test
                self.tempend='\r\n'if data[4]=='02' else ''#test
                clients[self.cid]=(clients[self.cid][0],self.tempend)#test
                print('now end is ',"JAVA ONE" if self.tempend=='\r\n' else '<N>')#test
                self.csocket.sendall(bytes(self.cid+divider+to+divider+"CACK"+divider+data[2]+clients[self.cid][1],'UTF-8'))
                print('[+] CACK sent')
            elif(data[2]=='SORC'):
                data = rawdata.decode().split(divider,6)
                print("[+] Device",self.cid," acting as source for :",data[3])
                print("[+] add data[0]=='000000' and  on soc wala if and remove this ")

                print('DATA is :',rawdata.decode())#test
                print('ENDING IS ',data[4])#test
                self.tempend='\r\n'if data[4]=='02' else ''#test
                clients[self.cid]=(clients[self.cid][0],self.tempend)#test
                print('now end is ',"JAVA ONE" if self.tempend=='\r\n' else '<N>')#test
                if(data[3] in clients):
                    print("[+]Device ",data[3]," found")
                    clients[data[3]][0].sendall(bytes(data[3]+divider+self.cid+divider+"CSRC"+divider+self.cid+divider+clients[data[3]][1],'UTF-8'))
                    check=1
                else:
                    print("[-]Device ",data[3]," not found")
                    check=0
                    self.csocket.sendall(bytes(self.cid+divider+to+divider+"FCN"+divider+data[2]+divider+data[3]+clients[self.cid][1],'UTF-8'))
            elif data[2]=='CLOSE':
                print('[-]Disconnecting from user Initiated by Device')
                break

            if data[2]=="CHAT" or data[2]=='NULL' or data[2]=='CACK' or data[2]=='NACK' or data[2]=='FCN' or data[2]=='ECHO':
                    if(data[0]=="!00000"):
                        print('[+] its is java right GODDAMNIT ')
                        data[0]='000000'
                    if data[2]=='CACK' or data[2] =='NACK' or data[2]=='FCN':
                        print(data[2],'|',self.cid,'->',data[0])
                        clients[data[0]][0].sendall(bytes(data[0]+divider+self.cid+divider+data[2]+divider+clients[data[0]][1],'UTF-8'))
                    elif data[2]=='ECHO':
                        print(data[2],'|','SERVER','->',self.cid)
                        self.csocket.sendall(bytes(self.cid+divider+to+divider+"ECHO"+divider+clients[self.cid][1],'UTF-8'))
                    elif data[0]=='000000':
                        print(data[2],'|',self.cid,'->',data[0])
                        self.csocket.sendall(bytes(self.cid+divider+to+divider+"CHAT"+divider+data[3]+clients[self.cid][1],'UTF-8'))
                    else:
                        print(data[2],'|',self.cid,'->',data[0])
                        clients[data[0]][0].sendall(bytes(data[0]+divider+self.cid+divider+"CHAT"+divider+data[3]+clients[data[0]][1],'UTF-8'))
                    i=0
        print("Device at ", clientAddress , " disconnected...")
        del clients[self.cid]

HOST = "0.0.0.0"
print('Enter Port ')
PORT=int(input())
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server.bind((HOST, PORT))
clients={}
print("Server started")
print("Waiting for client request..")

while True:
    server.listen(1)
    clientsock, clientAddress = server.accept()
    clientid=''
    while(True):
        for x in range(6):
            clientid+=str(random.randint(1,9))
        if clientid not in clients:
            break

    clients[clientid]=(clientsock,'')
    print("[+]Device added ")
    test=[k for k in clients]
    print('Device List at the moment',test)
    newthread = ClientThread(clientAddress, clientsock,clients,clientid)
    newthread.start()
    
